JSP.txt

JSP2.3 & Servlet3.1 => Spring(Framework, boot)

p10
웹프로그래밍

JSP(Java Server Page)
  서블릿 = Server + Applet(웹에서 실행되는 자바)
  => 웹에서 실행되는 자바 + ASP언어 = >> JSP
  
  프로세스 : 메모리에 로드된 프로그램(실행중인 프로그램)
  쓰레드 : 프로세스(프로글램)을 구성하는 최소 작업단위
  
  멀티 / 태스킹(task) <=> 멀티 프로세싱 (멀티쓰레딩)
  
  
  p16
  
  		사용자		=	요청	=>		[WEB서버]			=	요청	=>		[WEB서버]	<->	[DataBase]	
  											(정적데이터:HTML,CSS,JS,Img....)	(Web Application Server)
  													||
  					  <=	응답	=
  					  
  p24
  
  HTTP 프로토콜 : 통신을 위한 규약(약속)
  (Hyper Text Transfer Protocol)
  => 요청(request), 응답(response) 으로 구성되어있음
  
  	[ 시작 (요청)라인 ]		[ 시작 (요청)라인 ]
  	[ 헤더(일반/요청) ]		[ 헤더(일반/요청) ]
  	[ 본문(Body)		]		[ 본문(Body)		]
  		요청메세지					응답메세지
  		
  	HTTP 요청메세지			HTTP 응답메세지
  
  HTTP 요청	- GET방식 : 전송할 데이터를 주소줄(URL)에 붙여서 전송
  								 데이터(파라메터)의 기링가 256byte제한
  								 body가 필요없음 => 빠른 전송속도
  								 주소줄에 정보 오픈 => 보안취약점 발생
  								 
  				- POST방식 : 전송할 데이터를 body에 담아서 전송 (주소줄X)
  									데이터(파라메터)의 길이가 제한없음
  									
  									=> 느린 전송속도
  									=> 보안취약점 감소
  
  	HTTP 응답 : 요청 처리결과(+ MIME타입), 상태코드(HTTP STATUS)
  
  	웹컨테이너 : 웹을 실행하기 위한 모든 정보를 가지고 있는 것
  					(생성 ~ 소멸 모든 처리) => Tomcat
  
	* JSPdml include동작 처리
	
	1) <% include file="color.jsp" %>
	- JSP 지시어(include)
	- 파일을 추가하는 동작
	- 파일(소스코드)을 먼저 합치고 그다름 컴파일 후 실행
	=> 소스코드를 추가/ 설정, 공통값...
	
	2) <jsp:include page="../inc/top/jsp"/>
	- JSP 액션태그
	- 페이지를 추가하는 동작
	- 페이지를 먼저 컴파일 후 그다음 파일을 추가
	=> 만들어진 화면(jsp페이지)을 추가 / jsp 공통 페이지
	
	
	* 내장객체 (p177~208)
	=> JSP 내부에 포함되어있는 객체 (이미 생성된 객체)
	=> JSP 페이지를 실행시 (서블릿코드 실행시) 생성

	- java.servlet 패키지 (8)
		request : 클라이언트의 HTTP요청 정보를 저장한 객체
		response : HTTP요청에 따른 응답정보를 저장한 객체
		session : 클라이언트의 정보를 세션에 저장한 객체
		pageContext : 페이지실행에 필요한 프로젝트 정보를 저장한 객체
		out : 응답페이지 전송을 위한 출력 스트림 객체
		application : 프로그램(프로젝트)의 프로젝정보를 저장한 객체
		config : 서블릿(페이지)의 설정값을 저장한 객체
		page : 실행하고있는 페이지객체-인스턴스(서블릿)
		
	
	- java.lang 패키지(1)
		exception : 예외처리를 위한 객체
		
	D:\Shared\workspace_jsp6\.metadata\.plugins
     \org.eclipse.wst.server.core
     \tmp0\work\Catalina\localhost\studyJSP\org\apache\jsp\jsp
	
	p209~
   영역객체 / 속성
   
   ☆☆☆☆☆
   영역(Scope) : 속성을 공유할 수 있는 유효한 범위
    => page, requset, session, application
   속성(Attribute) : 영역에서 공유되는 데이터(객체)
   
   [영역]			[영역객체]			[유효범위]
	page			 pageContext		 해당 페이지(_jspService() 실행되는 동안)
	request		 request				 클라이언트 요청이 처리되는동안
	session		 session				 세션이 유지되는 동안(브라우저당 1개생성)
	application	 application			 웹 애플리케이션(프로젝트) 실행되는 동안

   - 영역객체에 정보(속성)를 저장
   => [영역객체].setAttribute("이름", 값);
   
   - 영역객체에 정보(속성)를 사용
   => [영역객체].getAttribute("이름")
   
   
   
   세션, 쿠키 (p270~)
   
   * 서버 <-> 클라이언트 통신은 HTTP프로토콜을 사용한다.
   * HTTP프로토콜의 특징은 상태를 유지X(무상태성)
    => 상태정보를 기억하기위해서 만들어진 개념 =>세션, 쿠키
    
    * 세션(Session) : 서버측의 컨테이너에 관리되며, 
    					   컨테이너에 접속~종료(브라우저종료)까지 유지되는 정보 
	
	
   [클라이언트]										[서버]
   
   				  -------1)연결&요청------->
   				
   				<-----2)1번요청에 응답------
  (네이버 페이지 실행완료)
  
  				  -------3)연결&요청------->
										(1번 요청, 3번요청이 동일한 사람의 정보인지 확인X)
				<-------4)3번요청에 응답-----
				
	  				
  404 에러페이지 
   
   https://slack.com/intl/ko-kr/121   
   https://www.pixar.com/1234
   https://www.marvel.com/1234
   https://github.com/1234zxczxc
   https://mailchimp.com/1234/
   https://www.kualo.com/1234
   
   
   * JDBC(Java DataBase Connectivity) 
   		: Java와 DMBS(mysql) 
   				   
   
   
   
   
   
   
   
   
   
   
   
   